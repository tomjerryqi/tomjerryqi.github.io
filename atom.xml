<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://tomjerryqi.github.io/atom.xml" rel="self"/>
  
  <link href="https://tomjerryqi.github.io/"/>
  <updated>2020-12-04T05:53:28.457Z</updated>
  <id>https://tomjerryqi.github.io/</id>
  
  <author>
    <name>zhang qi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Automaticclass</title>
    <link href="https://tomjerryqi.github.io/2020/11/29/Automatic-writing/"/>
    <id>https://tomjerryqi.github.io/2020/11/29/Automatic-writing/</id>
    <published>2020-11-29T11:59:51.000Z</published>
    <updated>2020-12-04T05:53:28.457Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，很多同学都有这样的烦恼–就是网课太多了自己一个一个点击那就是对时间的不尊重，今天我简单的带大家了解和使用一个插件，来提高平时学习的效率。（会的同学不要喷，你们都是大佬，但是好的东西需要拿出来大家一起分享嘛！）</p><h1 id="安装浏览器"><a href="#安装浏览器" class="headerlink" title="安装浏览器"></a>安装浏览器</h1><p>首当其冲的就是google浏览器，但是因为大多数同学都没有科学上网的习惯，所以给大家安利微软自家的浏览器<br><a href="https://www.microsoft.com/zh-cn/edge?form=MY01QL&OCID=MY01QL">Microsoft Edge</a>。<br>这款浏览器也是基于Google内核开发的，所以支持安装插件。</p><h2 id="设置浏览器"><a href="#设置浏览器" class="headerlink" title="设置浏览器"></a>设置浏览器</h2><h2 id="1·打开扩展"><a href="#1·打开扩展" class="headerlink" title="1·打开扩展"></a>1·打开扩展</h2><p><img src="/2020/11/29/Automatic-writing/%E6%89%A9%E5%B1%95.jpg" alt=" "></p><h2 id="2·打开开发者选项"><a href="#2·打开开发者选项" class="headerlink" title="2·打开开发者选项"></a>2·打开开发者选项</h2><p><img src="/2020/11/29/Automatic-writing/%E5%BC%80%E5%8F%91%E8%80%85.jpg" alt=" "><br>到这里浏览器设置好了，下面我们来安装插件</p><h2 id="3·tampermonkey插件的安装"><a href="#3·tampermonkey插件的安装" class="headerlink" title="3·tampermonkey插件的安装"></a>3·tampermonkey插件的安装</h2><p>这个插件可以做的事绝不仅仅只有刷课，这么简单，后续大家可以自己百度，由于篇幅有限在这里只给大家说明刷课的相关知识.<br>先放链接<a href="https://www.tampermonkey.net/">Tampermonkey</a><br><a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd">官网</a><br>Tampermonkey安装完成之后我们就可以安装插件了。</p><h2 id="4·插件的安装"><a href="#4·插件的安装" class="headerlink" title="4·插件的安装"></a>4·插件的安装</h2><p>打开Tampermonkey安装插件的<a href="https://greasyfork.org/zh-CN">官网</a><br>在🔍搜索框中搜索<strong>超新</strong> <strong>尔雅</strong> 等等就会看见不同的插件，根据不同的需求点进去就会看见安装按钮，点击安装就好了  </p><p><img src="/2020/11/29/Automatic-writing/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC.jpg" alt=" "><br>这样我们等待安装成功就可以了，至此我们的插件就完全安装好了，接下来是测试环节</p><h2 id="5·测试环节"><a href="#5·测试环节" class="headerlink" title="5·测试环节"></a>5·测试环节</h2><p>打开学习通点开需要刷课的课程就可以开始愉快的刷课和做题了这里提醒一下</p><blockquote><p>该刷的刷不该刷的课，就好好听吧，老师录制的新课一般是不能自动做题的，但是可以刷进度条  </p></blockquote><p><img src="/2020/11/29/Automatic-writing/%E6%B5%8B%E8%AF%95.jpg" alt=" "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家好，很多同学都有这样的烦恼–就是网课太多了自己一个一个点击那就是对时间的不尊重，今天我简单的带大家了解和使用一个插件，来提高平时学习的效率。（会的同学不要喷，你们都是大佬，但是好的东西需要拿出来大家一起分享嘛！）&lt;/p&gt;
&lt;h1 id=&quot;安装浏览器&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="学习通" scheme="https://tomjerryqi.github.io/tags/%E5%AD%A6%E4%B9%A0%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>Markdownprogrammer</title>
    <link href="https://tomjerryqi.github.io/2020/11/28/Markdownprogrammer/"/>
    <id>https://tomjerryqi.github.io/2020/11/28/Markdownprogrammer/</id>
    <published>2020-11-28T12:36:38.000Z</published>
    <updated>2020-11-30T13:09:15.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (例如：### My Header)。</p><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>要创建段落，请使用空白行将一行或多行文本进行分隔,不要用空格（spaces）或制表符（ tabs）缩进段落。</p><h1 id="Markdown-换行语法"><a href="#Markdown-换行语法" class="headerlink" title="Markdown 换行语法"></a>Markdown 换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。也可以使用HTMIL语法进行换行（ &lt; br &gt;)</p><h1 id="粗体（Bold）AND-斜体（Italic）"><a href="#粗体（Bold）AND-斜体（Italic）" class="headerlink" title="粗体（Bold）AND 斜体（Italic）"></a>粗体（Bold）AND 斜体（Italic）</h1><p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。  </p><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-标题语法&quot;&gt;&lt;a href=&quot;#Markdown-标题语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 标题语法&quot;&gt;&lt;/a&gt;Markdown 标题语法&lt;/h1&gt;&lt;p&gt;要创建标题，请在单词或短语前面添加井号 (#) 。#</summary>
      
    
    
    
    
    <category term="MarkDown语法" scheme="https://tomjerryqi.github.io/tags/MarkDown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习</title>
    <link href="https://tomjerryqi.github.io/2020/11/28/mysql/"/>
    <id>https://tomjerryqi.github.io/2020/11/28/mysql/</id>
    <published>2020-11-28T11:50:47.000Z</published>
    <updated>2020-12-04T05:52:18.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="一、数据库简介"><a href="#一、数据库简介" class="headerlink" title="一、数据库简介"></a>一、数据库简介</h2><ol><li><p>数据<br>所谓数据（Data）是指对客观事物进行描述并可以鉴别的符号，这些符号是可识别的、抽象的。它不仅仅指狭义上的数字，而是有多种表现形式：字母、文字、文本、图形、音频、视频等。现在计算机存储和处理的数据范围十分广泛，而描述这些数据的符号也变得越来越复杂了。</p></li><li><p>数据库<br>数据库（Database，DB）指的是以一定格式存放、能够实现多个用户共享、与应用程序彼此独立的数据集合。举例：车库，水库，数据库</p></li><li><p>数据库管理系统<br>数据库管理系统（Database Management System，DBMS）是用来定义和管理数据的软件。如何科学的组织和存储数据，如何高效的获取和维护数据，如何保证数据的安全性和完整性，这些都需要靠数据库管理系统完成。目前，比较流行的数据库管理系统有：Oracle、MySQL、SQL Server、DB2等。</p></li><li><p>数据库应用程序<br>数据库应用程序（Database Application System，DBAS）是在数据库管理系统基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序，如学生管理系统、人事管理系统、图书管理系统等。</p></li></ol><ol start="5"><li>数据库管理员<br>数据库管理员（Database Administrator，DBA）是指对数据库管理系统进行操作的人员，其主要负责数据库的运营和维护。</li></ol><ol start="6"><li>最终用户<br>最终用户（User）指的是数据库应用程序的使用者。用户面向的是数据库应用程序（通过应用程序操作数据），并不会直接与数据库打交道。</li></ol><ol start="7"><li>数据库系统<br>数据库系统（Database System，DBS）<br>一般是由数据库、数据库管理系统、数据库应用程序、数据库管理员和最终用户构成。其中DBMS是数据库系统的基础和核心。</li></ol><h2 id="二、数据库的分类"><a href="#二、数据库的分类" class="headerlink" title="二、数据库的分类"></a>二、数据库的分类</h2><p>　　数据库经过几十年的发展，出现了多种类型。根据数据的组织结构不同，主要分为网状数据库、层次数据库、关系型数据库和非关系型数据库四种。网状数据库、层次数据库已经逐渐被淘汰，目前最常见的数据库模型主要是：关系型数据库和非关系型数据库。</p><p> 1、关系型数据库<br>　　关系型数据库模型是将复杂的数据结构用较为简单的二元关系（二维表）来表示。在该类型数据库中，对数据的操作基本上都建立在一个或多个表格上，我们可以采用结构化查询语言（SQL）对数据库进行操作。关系型数据库是目前主流的数据库技术，其中具有代表性的数据库管理系统有：Oracle、DB2、SQL Server、MySQL等。</p><p> 2、非关系型数据库NOSQL<br>　　NOSQL（Not Only SQL）泛指非关系型数据库。关系型数据库在超大规模和高并发的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题。NOSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。常见的非关系型数据库管理系统有Memcached、MongoDB、Redis等。</p><h2 id="三、SQL语言的五个部分"><a href="#三、SQL语言的五个部分" class="headerlink" title="三、SQL语言的五个部分"></a>三、SQL语言的五个部分</h2><p> 1·数据查询语言（Data Query Language，DQL）：DQL主要用于数据的查询，其基本结构是：<br>使用SELECT子句，FROM子句和WHERE子句的组合来查询一条或多条数据。<br>数据操作语言（Data Manipulation Language，DML）：DML主要用于对数据库中的数据进行增加、修改和删除的操作，其主要包括：</p><ol><li><p>INSERT：增加数据</p></li><li><p>UPDATE：修改数据</p></li><li><p>DELETE：删除数据</p></li></ol><p>2· 数据定义语言（Data Definition Language，DDL）：DDL主要用针对是数据库对象（表、索引、视图、触发器、存储过程、函数、表空间等）进行创建、修改和删除操作。其 主要包括：</p><ol><li><p>CREATE：创建数据库对象</p></li><li><p>ALTER：修改数据库对象</p></li><li><p>DROP：删除数据库对象</p></li></ol><p>3· 数据控制语言（Data Control Language，DCL）：DCL用来授予或回收访问数据库的权限，其主要包括：</p><ol><li><p>GRANT：授予用户某种权限</p></li><li><p>REVOKE：回收授予的某种权限</p></li></ol><p>4· 事务控制语言（Transaction Control Language，TCL）：TCL用于数据库的事务管理。 其主要包括：</p><ol><li><p>START TRANSACTION：开启事务</p></li><li><p>COMMIT：提交事务</p></li><li><p>ROLLBACK：回滚事务</p></li><li><p>SET TRANSACTION：设置事务的属性</p></li></ol><blockquote><p>注意： DML和DDL的不同  </p></blockquote><p>数据操作语言(DML)（insert、update、delete）针对表中的数据。</p><p>　　而数据定义语言(DDl)（create、alter、drop）针对数据库对象，比如数据库database、表table、索引index、视图view、存储过程procedure、触发器trigger。</p><h2 id="四、数据库字符集和数据类型"><a href="#四、数据库字符集和数据类型" class="headerlink" title="四、数据库字符集和数据类型"></a>四、数据库字符集和数据类型</h2><h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><p> MySQL、数据库、表、字段均可设置编码</p><p>– 数据编码与客户端编码不需一致</p><p>SHOW VARIABLES LIKE ‘character_set_%’ – 查看所有字符集编码项</p><p>character_set_client 客户端向服务器发送数据时使用的编码</p><p>character_set_results 服务器端将结果返回给客户端所使用的编码</p><p>character_set_connection 连接层编码</p><p>SET 变量名 = 变量值</p><p>SET character_set_client = gbk;</p><p>SET character_set_results = gbk;</p><p>SET character_set_connection = gbk;</p><p>SET NAMES GBK; – 相当于完成以上三个设置</p><p>– 校对集</p><p>校对集用以排序</p><p>SHOW CHARACTER SET [LIKE ‘pattern’]/SHOW CHARSET [LIKE ‘pattern’] 查看所有字符集</p><p>SHOW COLLATION [LIKE ‘pattern’] 查看所有校对集</p><p>CHARSET 字符集编码 设置字符集编码</p><p>COLLATE 校对集编码 设置校对集编码   </p><h3 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h3><h4 id="a-整型"><a href="#a-整型" class="headerlink" title="a. 整型"></a>a. 整型</h4><p>类型 字节 范围（有符号位）</p><p>tinyint 1字节 -128 ~ 127 无符号位：0 ~ 255</p><p>smallint 2字节 -32768 ~ 32767</p><p>mediumint 3字节 -8388608 ~ 8388607</p><p>int 4字节</p><p>bigint 8字节</p><p>int(M) M表示总位数</p><ul><li><p>默认存在符号位，unsigned 属性修改</p></li><li><p>显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</p></li></ul><p>例：int(5) 插入一个数’123’，补填后为’00123’</p><ul><li><p>在满足要求的情况下，越小越好。</p></li><li><p>1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</p></li></ul><h4 id="b-浮点型"><a href="#b-浮点型" class="headerlink" title="b. 浮点型"></a>b. 浮点型</h4><p>类型 字节 范围</p><p>float(单精度) 4字节</p><p>double(双精度) 8字节</p><p>浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</p><p>不同于整型，前后均会补填0.</p><p>定义浮点型时，需指定总位数和小数位数。</p><p>float(M, D) double(M, D)</p><p>M表示总位数，D表示小数位数。</p><p>M和D的大小会决定浮点数的范围。不同于整型的固定范围。</p><p>M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</p><p>支持科学计数法表示。</p><p>浮点数表示近似值。</p><h4 id="c-定点数"><a href="#c-定点数" class="headerlink" title="c. 定点数"></a>c. 定点数</h4><p>decimal – 可变长度</p><p>decimal(M, D) M也表示总位数，D表示小数位数。</p><p>保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</p><p>将浮点数转换为字符串来保存，每9位数字保存为4个字节。</p><h3 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h3><h4 id="a-char-varchar"><a href="#a-char-varchar" class="headerlink" title="a. char, varchar"></a>a. char, varchar</h4><p>char 定长字符串，速度快，但浪费空间</p><p>varchar 变长字符串，速度慢，但节省空间</p><p>M表示能存储的最大长度，此长度是字符数，非字节数。</p><p>不同的编码，所占用的空间不同。</p><p>char,最多255个字符，与编码无关。</p><p>varchar,最多65535字符，与编码有关。</p><p>一条有效记录最大不能超过65535个字节。</p><p>utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</p><p>varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</p><p>varchar 的最大有效长度由最大行大小和使用的字符集确定。</p><p>最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。</p><p>例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</p><h4 id="b-blob-text"><a href="#b-blob-text" class="headerlink" title="b. blob, text"></a>b. blob, text</h4><p>blob 二进制字符串（字节字符串）</p><p>tinyblob, blob, mediumblob, longblob</p><p>text 非二进制字符串（字符字符串）</p><p>tinytext, text, mediumtext, longtext</p><p>text 在定义时，不需要定义长度，也不会计算总长度。</p><p>text 类型在定义时，不可给default值</p><h4 id="c-binary-varbinary"><a href="#c-binary-varbinary" class="headerlink" title="c. binary, varbinary"></a>c. binary, varbinary</h4><p>类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</p><p>char, varchar, text 对应 binary, varbinary, blob.</p><h3 id="3-日期时间类型"><a href="#3-日期时间类型" class="headerlink" title="3. 日期时间类型"></a>3. 日期时间类型</h3><p>一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</p><p>datetime 8字节 日期及时间 1000-01-01 00:00:00 到 9999-12-31 23:59:59</p><p>date 3字节 日期 1000-01-01 到 9999-12-31</p><p>timestamp 4字节 时间戳 19700101000000 到 2038-01-19 03:14:07</p><p>time 3字节 时间 -838:59:59 到 838:59:59</p><p>year 1字节 年份 1901 - 2155</p><p>datetime YYYY-MM-DD hh:mm:ss</p><p>timestamp YY-MM-DD hh:mm:ss</p><p>YYYYMMDDhhmmss</p><p>YYMMDDhhmmss</p><p>YYYYMMDDhhmmss</p><p>YYMMDDhhmmss</p><p>date YYYY-MM-DD</p><p>YY-MM-DD</p><p>YYYYMMDD</p><p>YYMMDD</p><p>YYYYMMDD</p><p>YYMMDD</p><p>time hh:mm:ss</p><p>hhmmss</p><p>hhmmss</p><p>year YYYY</p><p>YY</p><p>YYYY</p><p>YY</p><h3 id="4-枚举和集合"><a href="#4-枚举和集合" class="headerlink" title="4. 枚举和集合"></a>4. 枚举和集合</h3><h4 id="1、枚举-enum"><a href="#1、枚举-enum" class="headerlink" title="1、枚举(enum)"></a>1、枚举(enum)</h4><p>enum(val1, val2, val3…)</p><p>在已知的值中进行单选。最大数量为65535.</p><p>枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</p><p>表现为字符串类型，存储却是整型。</p><p>NULL值的索引是NULL。</p><p>空字符串错误值的索引值是0。</p><h4 id="2、-集合（set）"><a href="#2、-集合（set）" class="headerlink" title="2、 集合（set）"></a>2、 集合（set）</h4><p>set(val1, val2, val3…)</p><p>create table tab ( gender set(‘男’, ‘女’, ‘无’) );</p><p>insert into tab values (‘男, 女’);</p><p>最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</p><p>当创建表时，SET成员值的尾部空格将自动被删除。  </p><h2 id="五、Mysql数据库的基本操作"><a href="#五、Mysql数据库的基本操作" class="headerlink" title="五、Mysql数据库的基本操作"></a>五、Mysql数据库的基本操作</h2><p>数据库的启动</p><blockquote><p>mysql -u <strong>用户名</strong>-p<strong>密码</strong>   </p></blockquote><p><img src="/2020/11/28/mysql/%E5%90%AF%E5%8A%A8.jpg" alt=" "><br> 查看所有数据库  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show databases;+--------------------+| Database           |+--------------------+| commpany           || information_schema || mysql              || performance_schema || sys                || szxy               || test               |+--------------------+7 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 查看当前所使用的数据库  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT DATABASE();+------------+| DATABASE() |+------------+| szxy       |+------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示当前时间、用户名、数据库版本  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT now(), user(), version();+---------------------+----------------+-----------+| now()               | user()         | version() |+---------------------+----------------+-----------+| 2020-11-30 16:29:24 | root@localhost | 8.0.22    |+---------------------+----------------+-----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建库  </p><blockquote><p>CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项  </p></blockquote><p>数据库选项包括：  </p><p>CHARACTER SET charset_name//连接字符集的设置<br>COLLATE collation_name//校验规则的设置<br><strong>在创建数据库时可以手动更改系统默认的连接字符集和 校验规则（客户端，连接和返回结果三者字符集的校验）</strong></p><pre class="line-numbers language-none"><code class="language-none">mysql&gt;  create database if not exists zqi;Query OK, 1 row affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看数据库详细信息  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show create database szxy;+----------+--------------------------------------------------------------------------------------------------------------------------------+| Database | Create Database                                                                                                                |+----------+--------------------------------------------------------------------------------------------------------------------------------+| szxy     | CREATE DATABASE &#96;szxy&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci *&#x2F; &#x2F;*!80016 DEFAULT ENCRYPTION&#x3D;&#39;N&#39; *&#x2F; |+----------+--------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看服务器数据库字符集  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables like &#39;character_set_server&#39;;+----------------------+---------+| Variable_name        | Value   |+----------------------+---------+| character_set_server | utf8mb4 |+----------------------+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据库名称<br><strong>如果使用的存储引擎是InnoDB，则不可以修改数据库名称只可以修改字符集和校验规则</strong><br>修改szxy数据库的字符集为utf8  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; alter database szxy character set utf8;Query OK, 1 row affected, 1 warning (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除数据库  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop database if exists zqi;Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="六、表的基本操作"><a href="#六、表的基本操作" class="headerlink" title="六、表的基本操作"></a>六、表的基本操作</h2><h3 id="1、创建表的简介"><a href="#1、创建表的简介" class="headerlink" title="1、创建表的简介"></a>1、创建表的简介</h3><blockquote><p>语句：CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]  </p></blockquote><p>1.每个字段必须有数据类型<br>2.最后一个字段后不能有逗号<br>3.TEMPORARY 临时表，会话结束时表自动消失</p><h3 id="2、对于字段的定义："><a href="#2、对于字段的定义：" class="headerlink" title="2、对于字段的定义："></a>2、对于字段的定义：</h3><p>字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT ‘string’]</p><ul><li><p>表选项</p></li><li><p>字符集</p></li></ul><p>CHARSET = charset_name<br>CHARACTER SET charset_name//连接字符集的设置 </p><p>如果表没有设定，则使用数据库字符集</p><ul><li>存储引擎</li></ul><p>ENGINE = engine_name</p><p>表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</p><p>常见的引擎：<br>1.InnoDB 存储引擎：Mysql 5.5版本后默认的存储引擎，优点是支持事务，行级锁，外键约束，支持崩溃后的安全恢复；<br>2.MyISAM 存储引擎：不支持事务和外键，支持全文索引（但只对英文有效），特点是查询速度快；<br>3.Memory 存储引擎：数据放在内存当中（类似memcache）以便得到更快的响应速度，但是崩掉的话数据会丢失；<br>不同的引擎在保存表的结构和数据时采用不同的方式</p><blockquote><p>MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</p></blockquote><blockquote><p>InnoDB表文件含义：.frm表定义，表空间数据和日志文件</p></blockquote><h3 id="3、创建一个表实践"><a href="#3、创建一个表实践" class="headerlink" title="3、创建一个表实践"></a>3、创建一个表实践</h3><ul><li>查看所有的表</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create table table_name(id int,name varchar(10));Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+----------------+| Tables_in_szxy |+----------------+| course         || sc             || student        || table_name     |+----------------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接将查询结果导入或复制到新创建的表</li><li>复制表结构和数据<pre class="line-numbers language-none"><code class="language-none">mysql&gt; create table stu1 select *from course;Query OK, 14 rows affected (0.03 sec)Records: 14  Duplicates: 0  Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>新创建的表与一个存在的表的数据结构类似</li><li>复制表结构<pre class="line-numbers language-none"><code class="language-none">mysql&gt; CREATE TABLE m LIKE student;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>创建一个临时表,临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除  </li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create temporary table zq1(id int, name varchar(10));Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看表的结构  </li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; desc zq1;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    | NULL  || name  | varchar(10) | YES  |     | NULL    | NULL  |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)mysql&gt; describe zq1;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    | NULL  || name  | varchar(10) | YES  |     | NULL    | NULL  |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更改存在表的名称  </li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; alter table zq1 rename zq2;Query OK, 0 rows affected (0.00 sec)Records: 0  Duplicates: 0  Warnings: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看表的创建语句</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show create table zq2;+-------+--------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table                                                                                                                   |+-------+--------------------------------------------------------------------------------------------------------------------------------+| zq2   | CREATE TEMPORARY TABLE &#96;zq2&#96; (  &#96;id&#96; int DEFAULT NULL,  &#96;name&#96; varchar(10) DEFAULT NULL) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 |+-------+--------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显示存储引擎的状态信息  </li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show engines;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         || BLACKHOLE          | YES     | &#x2F;dev&#x2F;null storage engine (anything you write to it disappears) | NO           | NO   | NO         || MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         || FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       || MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         || PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         || InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        || MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         || CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改表本身的选项    </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; alter table zq2 engine&#x3D;myisam;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对表进行重命名   </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; rename table stu1 to stu2;Query OK, 0 rows affected (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改表的字段结构（修改表内部结构)  </p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 操作名操作名        ADD[ COLUMN] 字段定义 -- 增加字段        AFTER 字段名 -- 表示增加在该字段名后面        FIRST -- 表示增加在第一个        ADD PRIMARY KEY(字段名) -- 创建主键        ADD UNIQUE [索引名] (字段名)-- 创建唯一索引        ADD INDEX [索引名] (字段名) -- 创建普通索引        DROP[ COLUMN] 字段名 -- 删除字段        MODIFY[ COLUMN] 字段名 字段属性 -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)CHANGE[ COLUMN] 原字段名 新字段名 字段属性 -- 支持对字段名修改        DROP PRIMARY KEY -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)DROP INDEX 索引名 -- 删除索引        DROP FOREIGN KEY 外键 -- 删除外键 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除表</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop table if exists zq2;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>清空表数据</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; truncate table stu2;Query OK, 0 rows affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查表是否有错误</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; check table stu2;+-----------+-------+----------+----------+| Table     | Op    | Msg_type | Msg_text |+-----------+-------+----------+----------+| szxy.stu2 | check | status   | OK       |+-----------+-------+----------+----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、对表中数据的操作"><a href="#4、对表中数据的操作" class="headerlink" title="4、对表中数据的操作"></a>4、对表中数据的操作</h3><h4 id="增添数据"><a href="#增添数据" class="headerlink" title="增添数据"></a>增添数据</h4><p>INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), …]</p><p>– 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</p><p>– 可同时插入多条数据记录！</p><p>REPLACE 与 INSERT 完全一样，可互换。</p><p>INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, …]</p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>SELECT 字段列表 FROM 表名[ 其他子句]</p><p>– 可来自多个表的多个字段</p><p>– 其他子句可以不使用</p><p>– 字段列表可以用*代替，表示所有字段</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>DELETE FROM 表名[ 删除条件子句]</p><p>没有条件子句，则会删除全部</p><h4 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h4><p>UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96; dcw <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>SELECT count(id) AS total FROM n;   # 总数<br>SELECT sum(age) AS all_age FROM n;   # 总和<br>SELECT avg(age) AS all_age FROM n;   # 平均值<br>SELECT max(age) AS all_age FROM n;   # 最大值<br>SELECT min(age) AS all_age FROM n;   # 最小值</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>SELECT abs(-5);   # 绝对值<br>SELECT bin(15), oct(15), hex(15);   # 二进制，八进制，十六进制<br>SELECT pi();   # 圆周率3.141593<br>SELECT ceil(5.5);   # 大于x的最小整数值6<br>SELECT floor(5.5);   # 小于x的最大整数值5<br>SELECT greatest(3,1,4,1,5,9,2,6);   # 返回集合中最大的值9<br>SELECT least(3,1,4,1,5,9,2,6);    # 返回集合中最小的值1<br>SELECT mod(5,3);    # 余数2<br>SELECT rand();    # 返回０到１内的随机值，每次不一样<br>SELECT rand(5);   # 提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。<br>SELECT round(1415.1415);   # 四舍五入1415<br>SELECT round(1415.1415, 3);   # 四舍五入三位数1415.142<br>SELECT round(1415.1415, -1);    # 四舍五入整数位数1420<br>SELECT truncate(1415.1415, 3);    # 截短为3位小数1415.141<br>SELECT truncate(1415.1415, -1);   # 截短为-1位小数1410<br>SELECT sign(-5);    # 符号的值负数-1<br>SELECT sign(5);    # 符号的值正数1<br>SELECT sqrt(9);   # 平方根3<br>SELECT sqrt(9);   # 平方根3</p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>SELECT concat(‘a’, ‘p’, ‘p’, ‘le’);   # 连接字符串-apple<br>SELECT concat_ws(‘,’, ‘a’, ‘p’, ‘p’, ‘le’);   # 连接用’,’分割字符串-a,p,p,le<br>SELECT insert(‘chinese’, 3, 2, ‘IN’);    # 将字符串’chinese’从3位置开始的2个字符替换为’IN’-chINese<br>SELECT left(‘chinese’, 4);   # 返回字符串’chinese’左边的4个字符-chin<br>SELECT right(‘chinese’, 3);   # 返回字符串’chinese’右边的3个字符-ese<br>SELECT substring(‘chinese’, 3);   # 返回字符串’chinese’第三个字符之后的子字符串-inese<br>SELECT substring(‘chinese’, -3);   # 返回字符串’chinese’倒数第三个字符之后的子字符串-ese<br>SELECT substring(‘chinese’, 3, 2);   # 返回字符串’chinese’第三个字符之后的两个字符-in<br>SELECT trim(‘ chinese ‘);    # 切割字符串’ chinese ‘两边的空字符-‘chinese’<br>SELECT ltrim(‘ chinese ‘);    # 切割字符串’ chinese ‘两边的空字符-‘chinese ‘<br>SELECT rtrim(‘ chinese ‘);    # 切割字符串’ chinese ‘两边的空字符-‘ chinese’<br>SELECT repeat(‘boy’, 3);    # 重复字符’boy’三次-‘boyboyboy’<br>SELECT reverse(‘chinese’);    # 反向排序-‘esenihc’<br>SELECT length(‘chinese’);   # 返回字符串的长度-7<br>SELECT upper(‘chINese’), lower(‘chINese’);    # 大写小写 CHINESE    chinese<br>SELECT ucase(‘chINese’), lcase(‘chINese’);    # 大写小写 CHINESE    chinese<br>SELECT position(‘i’ IN ‘chinese’);    # 返回’i’在’chinese’的第一个位置-3<br>SELECT position(‘e’ IN ‘chinese’);    # 返回’i’在’chinese’的第一个位置-5<br>SELECT strcmp(‘abc’, ‘abd’);    # 比较字符串，第一个参数小于第二个返回负数- -1<br>SELECT strcmp(‘abc’, ‘abb’);    # 比较字符串，第一个参数大于第二个返回正数- 1</p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p>SELECT current_date, current_time, now();    # 2018-01-13   12:33:43    2018-01-13 12:33:43<br>SELECT hour(current_time), minute(current_time), second(current_time);    # 12  31   34<br>SELECT year(current_date), month(current_date), week(current_date);   # 2018    1   1<br>SELECT quarter(current_date);   # 1<br>SELECT monthname(current_date), dayname(current_date);   # January  Saturday<br>SELECT dayofweek(current_date), dayofmonth(current_date), dayofyear(current_date);    # 7   13  13</p><h3 id="控制流函数"><a href="#控制流函数" class="headerlink" title="控制流函数"></a>控制流函数</h3><p>SELECT if(3&gt;2, ‘t’, ‘f’), if(3&lt;2, ‘t’, ‘f’);    # t f<br>SELECT ifnull(NULL, ‘t’), ifnull(2, ‘t’);    # t 2<br>SELECT isnull(1), isnull(1/0);    # 0 1 是null返回1，不是null返回0<br>SELECT nullif(‘a’, ‘a’), nullif(‘a’, ‘b’);    # null a 参数相同或成立返回null，不同或不成立则返回第一个参数<br>SELECT CASE 2<br>       WHEN 1 THEN ‘first’<br>       WHEN 2 THEN ‘second’<br>       WHEN 3 THEN ‘third’<br>       ELSE ‘other’<br>       END ;     # second</p><h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><p>SELECT database();    # 当前数据库名-test<br>SELECT connection_id();   # 当前用户id-306<br>SELECT user();    # 当前用户-root@localhost<br>SELECT version();   # 当前mysql版本<br>SELECT found_rows();    # 返回上次查询的检索行数  </p><h2 id="九、列属性（列约束）"><a href="#九、列属性（列约束）" class="headerlink" title="九、列属性（列约束）"></a>九、列属性（列约束）</h2><p>1、表中添加主键  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; alter table stu3 add primary key(cno);Query OK, 0 rows affected (0.04 sec)Records: 0  Duplicates: 0  Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、删除主键  </p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; alter table stu3 drop primary key;Query OK, 0 rows affected (0.03 sec)Records: 0  Duplicates: 0  Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql&quot;&gt;&lt;a href=&quot;#Mysql&quot; class=&quot;headerlink&quot; title=&quot;Mysql&quot;&gt;&lt;/a&gt;Mysql&lt;/h1&gt;&lt;h2 id=&quot;一、数据库简介&quot;&gt;&lt;a href=&quot;#一、数据库简介&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="数据库学习" scheme="https://tomjerryqi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>张琦的第一篇博客</title>
    <link href="https://tomjerryqi.github.io/2020/11/25/hello-world/"/>
    <id>https://tomjerryqi.github.io/2020/11/25/hello-world/</id>
    <published>2020-11-25T11:50:47.000Z</published>
    <updated>2020-11-30T12:52:39.319Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the first blog of 张琦 <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when<br> using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to the first blog of 张琦 &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;</summary>
      
    
    
    
    
    <category term="hexo博客搭建" scheme="https://tomjerryqi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
